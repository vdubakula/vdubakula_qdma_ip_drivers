#! /usr/bin/env groovy

def get_changes_string() {
    MAX_MSG_LEN = 100

    def change_sets = currentBuild.changeSets.unique()
    if (change_sets.size() == 0) {
        return " - No new changes"
    }

    def change_string = ""
    for (entry in change_sets[0].items) {
        change_string += "${entry.commitId} [${entry.author}]:<br/>- ${entry.msg}<br/>"
    }

    return change_string
}

def run_as_sudo(shell_command) {
    sh 'echo "!2023!cns!xhd!sw!" | sudo -S ' + shell_command
}

def reboot_target(target_hostname) {
    try {
        timeout(20) { //minutes
            // assume running on master node
            run_as_sudo("ssh -o StrictHostKeyChecking=no -l cadman ${target_hostname} /usr/bin/sudo -S /sbin/reboot") //schedule reboot in 1 min
        }
    } catch (e) {
        sleep 150 // seconds, give some time for reboot
        waitUntil { // wait until ssh port is open
            def ret = sh script: "nc -w 20 -z ${target_hostname} 22 > /dev/null", returnStatus: true
            return (ret == 0)
        }
    }

    node(target_hostname) { // confirm jenkins slave is up
        sh 'uptime; echo $(hostname) ONLINE'
    }    
}

def ignore_error(func, err_msg = "ignored error") {
    try {
        func()
    } catch (err) {
        echo "$err_msg"
    }
}

def send_build_result_email(recipients) {
    emailext(to: "${recipients}",
        mimeType: 'text/html',
        from: 'jenkinsrobot@xilinx.com',
        subject: "${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
        attachmentsPattern: '**/*.xlsx',
        body: """<p>Project: ${currentBuild.fullDisplayName}<br/>
                Result: ${currentBuild.currentResult}<br/>
                Bitfile: ${BITFILE}<br/>
                Config: ${GTEST_CONFIG_PATH}<br/>
                Changes:<br/>
                ${get_changes_string()}<br/>
                <br/>
                For more details please go to <a href=${env.JOB_URL}>${env.JOB_NAME}</a></p>""");
}

def remove_drivers() {
    node("${NODE_ADDRESS}") {
        ignore_error({run_as_sudo('/sbin/rmmod qdma')})
            ignore_error({run_as_sudo('/sbin/rmmod qdma_vf')})
    }
}

def prog_board() {

    echo "programming HW"


    node("${NODE_ADDRESS}") {
        echo "Remove any previous driver (if needed)"
        dir("${DRIVER_PATH}") { script {
            remove_drivers()
        }}
        
        echo "update the grub"
		ignore_error({run_as_sudo('cp /etc/default/grub-linux-vm /etc/default/grub')})
		ignore_error({run_as_sudo('update-grub')})
		ignore_error({run_as_sudo('update-grub2')})

        echo "removing pci devices..."
         dir('util/common/scripts') { script {
             ignore_error({run_as_sudo("./pci_remove_device.csh ${PCI_ID}")})
        }}

        echo "uploading bitstream..."
        dir('.') { script {
            bitfile_dir ="${env.WORKSPACE}/${BITFILE}"
            echo "${bitfile_dir}" // BITFILE can be set via jenkins job parameter
			if ("$DEVICETYPE" == "VERSAL_H10") {
                run_as_sudo('python3.6 util/common/scripts/pdu_auto_login.py -u ${PDU_IP} -a 5 -r ${PDU_RELAY}')
                sleep 5
                run_as_sudo('sh util/common/scripts/program_versal_h10_pdi.sh ${TARGET_IDX} ${BITFILE}')
            }else if ("$DEVICETYPE" == "VERSAL") {
				run_as_sudo('sh util/common/scripts/program_versal_pdi.sh ${TARGET_IDX} util/common/scripts/spi2vjtag.tcl ${BITFILE} util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl util/common/scripts/qdma_versal_msix.tcl')
            }
            else {
                run_as_sudo('sh util/common/scripts/program_qdma_bitstream.sh ${TARGET_IDX} ${BITFILE}')
				//run_as_sudo('"${VIVADO_PATH}" -nolog -nojournal -mode batch -source util/common/scripts/program_bitstream.tcl -tclargs ${BOARD_IDX} 0 ${BITFILE}')
            }
        }}
    }

    script { // on master node
        echo "rebooting target machine..."
        reboot_target("${NODE_ADDRESS}")
    }
    
    node("${NODE_ADDRESS}") {
        echo "make BAR resources accessible for jenkins user"
        run_as_sudo("chmod a+rw /sys/bus/pci/devices/0000:${PCI_ID}/resource*") 
    }
    
    echo "HW programming done"
}

pipeline {
    agent { node { label 'master' } }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }
    stages {
        stage('Checkout') { steps { // 
            node("${NODE_ADDRESS}") {
                //deleteDir()
                checkout scm
            }
        }}
        
        stage('Static Analysis') { steps { script {
            if ("${STATIC_ANALYSIS}" == "1") {
	            node("${NODE_ADDRESS}") {    
	                dir("${SCRIPT_PATH}/../linux") {
	                    run_as_sudo('chmod +x ./run_static_analysis.sh')
	                    run_as_sudo('./run_static_analysis.sh ../../../../${DRIVER_PATH} ${COMPILE_FLAGS}')
	                }
	            }
            }
        }}}
        
        stage('Testing') { steps { script {
	    System.setProperty("org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL", "3800");
            try {
                prog_board()
            
                echo "Remove any existing driver"
                remove_drivers()

                node("${NODE_ADDRESS}") {
                    echo "Starting Test Execution"
                    dir("${SCRIPT_PATH}/gtest_scripts") {
                        run_as_sudo('chmod +x ./*.sh')
                        run_as_sudo('chmod +x ./*.py')
                        
						def vm_cnt = "$VM_COUNT"
                        def int_vm_cnt = vm_cnt.isInteger() ?  (vm_cnt as int) : null
                        
                        if(int_vm_cnt == 1)
                             vm_cfg = "\"${VM_1_CONFIG}\""
                        if(int_vm_cnt == 2)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\""
                        if(int_vm_cnt == 3)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\""
                        if(int_vm_cnt == 4)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\""
                        if(int_vm_cnt == 5)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\""  
                        if(int_vm_cnt == 6)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\""
                        if(int_vm_cnt == 7)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\""
						if(int_vm_cnt == 8)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\""
						if(int_vm_cnt == 9)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\" \"${VM_9_CONFIG}\"" 
						if(int_vm_cnt == 10)
                             vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\" \"${VM_9_CONFIG}\" \"${VM_10_CONFIG}\""			 
                             
                        echo "vm config ${vm_cfg}"     
						run_as_sudo("python vm_automation.py \"/home/dpdk/${SCRIPT_PATH}/gtest_scripts/\"  \"./gtest_top.sh ${PCI_BBDDF} ../../../../${GTEST_CONFIG_PATH} ../../../../${DRIVER_PATH} ../../../../${TEST_APP_PATH} vf linux ${CONFIG_BAR} ${COMPILE_FLAGS}\"  \"../../../../${DRIVER_PATH}/\" linux ${PCI_BBDDF} ${VM_IMAGE_PATH} ${VM_COUNT} ../../../../${GTEST_CONFIG_PATH} default_vf.txt ${VM_RAM} ${NUM_PFS} ${NUM_QUEUES} ${vm_cfg} vfio-pci ${CONFIG_BAR}")
                    }
					ignore_error({run_as_sudo('rm -rf ${TEST_APP_PATH}/build_linux_pf_vf')})
					ignore_error({run_as_sudo('rm -rf ${TEST_APP_PATH}/logs')})
                }
            } catch (e) {
                echo "Error during test"
                throw e
            }
        }}}
    }
    
    post {
    
        always { script {
			node("${NODE_ADDRESS}") {
				ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/gtest_scripts/*.tar.gz')})
				ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/gtest_scripts/*.tar.gz", fingerprint: true})   
				ignore_error({run_as_sudo('rm -rf ${SCRIPT_PATH}/gtest_scripts/*.tar.gz')})
				ignore_error({run_as_sudo('rm -rf ${TEST_APP_PATH}/build_linux_pf_vf')})
				ignore_error({run_as_sudo('rm -rf ${TEST_APP_PATH}/logs')})
			}
			// EMAIL_RECIPIENTS can be set via jenkins job parameter
            echo "Emailing build results to: ${EMAIL_RECIPIENTS}"
            send_build_result_email("${EMAIL_RECIPIENTS}")
        }}
        
    }
}
