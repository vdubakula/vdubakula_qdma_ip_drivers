! /usr/bin/env groovy

def get_changes_string() {
    MAX_MSG_LEN = 100

    def change_sets = currentBuild.changeSets.unique()
    if (change_sets.size() == 0) {
        return " - No new changes"
    }

    def change_string = ""
    for (entry in change_sets[0].items) {
        change_string += "${entry.commitId} [${entry.author}]:<br/>- ${entry.msg}<br/>"
    }

    return change_string
}

def run_as_sudo(shell_command) {
    sh 'echo "#ces#2022#dsamd#" | sudo -S ' + shell_command
}

def reboot_target(target_hostname) {
    try {
        timeout(20) { //minutes
            // assume running on master node
            //sh "ssh -o StrictHostKeyChecking=no -l cadman ${target_hostname} /usr/bin/sudo /sbin/reboot" //schedule reboot in 1 min
           node("${NODE_ADDRESS}") {
               run_as_sudo('reboot')
           }
        }
    } catch (e) {        
        sleep 600 // seconds, give some time for reboot
        waitUntil { // wait until ssh port is open
            def ret = sh script: "nc -w 20 -z ${target_hostname} 22 > /dev/null", returnStatus: true
            return (ret == 0)
        }
    }

    node(target_hostname) { // confirm jenkins slave is up
        sh 'uptime; echo $(hostname) ONLINE'
    }    
}

def ignore_error(func, err_msg = "ignored error") {
    try {
        func()
    } catch (err) {
        echo "$err_msg"
    }
}

def send_build_result_email(recipients) {
    mail(to: "${recipients}",
        mimeType: 'text/html',
        from: 'jenkinsrobot@xilinx.com',
        subject: "${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
        body: """<p>Project: ${currentBuild.fullDisplayName}<br/>
                Result: ${currentBuild.currentResult}<br/>
                Changes:<br/>
                ${get_changes_string()}<br/>
                <br/>
                For more details please go to <a href=${env.JOB_URL}>${env.JOB_NAME}</a></p>""");
}

def prog_board(mode) {

    echo "programming HW"

    node("${NODE_ADDRESS}") {
        echo "Remove any previous driver (if needed)"

        echo "removing pci devices..."
        dir('util/common/scripts') { script {
             ignore_error({run_as_sudo("./pci_remove_device.csh ${PCI_ID}")})
        }}
		
		echo "update the grub"
		if ("$IOMMU_SETTING" == "pt") {
			ignore_error({run_as_sudo('cp /etc/default/grub-linux-vm-iommu-pt /etc/default/grub')})
		} else {
			ignore_error({run_as_sudo('cp /etc/default/grub-linux-vm-iommu-on /etc/default/grub')})
		}
		ignore_error({run_as_sudo('update-grub')})
		ignore_error({run_as_sudo('update-grub2')})
		
        echo "uploading bitstream..."
        dir('.') { script {
            if ("$DEVICETYPE" == "VERSAL_H10") {
                run_as_sudo('python3.6 util/common/scripts/pdu_auto_login.py -u ${PDU_IP} -a 5 -r ${PDU_RELAY}')
                sleep 5
                if ("${mode}" == "mm_bram") {
                     run_as_sudo('sh util/common/scripts/program_versal_h10_pdi.sh ${TARGET_IDX} ${MM_BRAM_BITFILE}')
                } else if ("${mode}" == "mm_ddr") {
                     run_as_sudo('sh util/common/scripts/program_versal_h10_pdi.sh ${TARGET_IDX} ${MM_DDR_BITFILE}')
                } else {
                     run_as_sudo('sh util/common/scripts/program_versal_h10_pdi.sh ${TARGET_IDX} ${ST_BITFILE}')
                }
            } else if ("$DEVICETYPE" == "VERSAL") {
				if ("${mode}" == "mm_bram") {
						//run_as_sudo('sh HEAD/proj/util/common/scripts/program_versal_pdi.sh ${BOARD_INDEX} HEAD/proj/util/common/scripts/spi2vjtag.tcl ${MM_BRAM_BITFILE} HEAD/proj/util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl HEAD/proj/util/common/scripts/qdma_versal_msix.tcl')
						run_as_sudo('sh util/common/scripts/program_versal_pdi.sh ${TARGET_IDX} util/common/scripts/spi2vjtag.tcl ${MM_BRAM_BITFILE} util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl util/common/scripts/qdma_versal_msix.tcl')
				} else if ("${mode}" == "mm_ddr") {
						//run_as_sudo('sh HEAD/proj/util/common/scripts/program_versal_pdi.sh ${BOARD_INDEX} HEAD/proj/util/common/scripts/spi2vjtag.tcl ${MM_DDR_BITFILE} HEAD/proj/util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl HEAD/proj/util/common/scripts/qdma_versal_msix.tcl')
						run_as_sudo('sh util/common/scripts/program_versal_pdi.sh ${TARGET_IDX} util/common/scripts/spi2vjtag.tcl ${MM_DDR_BITFILE} util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl util/common/scripts/qdma_versal_msix.tcl')
				} else {
						//run_as_sudo('sh HEAD/proj/util/common/scripts/program_versal_pdi.sh ${BOARD_INDEX} HEAD/proj/util/common/scripts/spi2vjtag.tcl ${ST_BITFILE} HEAD/proj/util/common/scripts/qdma_versal_perf_mm_st_4pf_252vf.tcl HEAD/proj/util/common/scripts/qdma_versal_msix.tcl')
						run_as_sudo('sh util/common/scripts/program_versal_pdi.sh ${TARGET_IDX} util/common/scripts/spi2vjtag.tcl ${ST_BITFILE} util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl util/common/scripts/qdma_versal_msix.tcl')
				}
            } else if ("${mode}" == "mm_bram") {
                    //run_as_sudo('"${VIVADO_PATH}" -nolog -nojournal -mode batch -source HEAD/proj/util/common/scripts/program_bitstream.tcl -tclargs ${BOARD_INDEX} 0 ${MM_BRAM_BITFILE}')
					run_as_sudo('sh util/common/scripts/program_qdma_bitstream.sh ${TARGET_IDX} ${MM_BRAM_BITFILE}')
            } else if ("${mode}" == "mm_ddr") {
                    //run_as_sudo('"${VIVADO_PATH}" -nolog -nojournal -mode batch -source HEAD/proj/util/common/scripts/program_bitstream.tcl -tclargs ${BOARD_INDEX} 0 ${MM_DDR_BITFILE}')
					run_as_sudo('sh util/common/scripts/program_qdma_bitstream.sh ${TARGET_IDX} ${MM_DDR_BITFILE}')
            } else {
                    //run_as_sudo('"${VIVADO_PATH}" -nolog -nojournal -mode batch -source HEAD/proj/util/common/scripts/program_bitstream.tcl -tclargs ${BOARD_INDEX} 0 ${ST_BITFILE}')
					run_as_sudo('sh util/common/scripts/program_qdma_bitstream.sh ${TARGET_IDX} ${ST_BITFILE}')
            }
        }}
    }

    script { // on master node
        echo "rebooting target machine..."
        reboot_target("${NODE_ADDRESS}")
    }
    
    node("${NODE_ADDRESS}") {
        echo "make BAR resources accessible for jenkins user"
        run_as_sudo("chmod a+rw /sys/bus/pci/devices/0000:${PCI_ID}/resource*") 
    }
    
    echo "HW programming done"
}

pipeline {
    agent { node { label 'master' } }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }
    stages {
        stage('Checkout') { steps { // 
            node("${NODE_ADDRESS}") {
                //deleteDir()
                checkout scm
            }
        }}
        
        stage('Build and Install') { steps {
            node("${NODE_ADDRESS}") {
                echo "building all qdma products and install"
                dir("${DRIVER_PATH}") {
                    ignore_error({run_as_sudo('./make_libqdma.sh clean')})
                    run_as_sudo('./make_libqdma.sh')
                    ignore_error({run_as_sudo('make uninstall-mods')})
                    run_as_sudo('make install-dev')
                    run_as_sudo('make install-apps')
					ignore_error({run_as_sudo('make install-mods')})
					ignore_error({run_as_sudo('rmmod qdma_pf')})
					ignore_error({run_as_sudo('rmmod qdma_vf')})
                }
                dir("${SCRIPT_PATH}") {
                    run_as_sudo('chmod +x *.sh')
                    run_as_sudo('chmod +x *.py')
                }
                
                echo "Archiving build products..."
                ignore_error({archiveArtifacts artifacts: "${DRIVER_PATH}/bin/*", fingerprint: true})
                
            }
        }}
        
        stage('Run MM BRAM Performance tests') { steps { script {
        if ("${MM_BRAM_PERF_REQUIRED}" != "false") {
	            try {
	                prog_board("mm_bram")
	        
	                node("${NODE_ADDRESS}") {
	                    echo "Running MM performance tests"
	                    dir("${SCRIPT_PATH}") {
	                        if ("$DEVICETYPE" == "VERSAL") {
								//run_as_sudo('./run_qdma_linux_perf_tests.sh ${PCI_BBDDF} ${DRIVER_PATH} dmaperf_versal_configs_mm ${NODE_ADDRESS}_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE}')
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_versal_configs_mm ${NODE_ADDRESS}_vm_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_mm_bram 4 \"1 0 0 0\" vfio-pci 0")
							} else {
								//run_as_sudo('./run_qdma_linux_perf_tests.sh ${PCI_BBDDF} ${DRIVER_PATH} dmaperf_configs_mm ${NODE_ADDRESS}_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE}')
								run_as_sudo("python vm_performance.py \"/home/dpdk/_tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_configs_mm ${NODE_ADDRESS}_vm_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_mm_bram 4 \"1 0 0 0\" vfio-pci 0")
							}
	                    }
	                    ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.xlsx')})
						ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.log')})
	                    ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.xlsx", fingerprint: true})
						ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.log", fingerprint: true})
						
	                }
	            } catch (e) {
	                echo "Error during MM performance test"
	            }
            }
        }}}
        
        stage('Run MM DDR Performance tests') { steps { script {
        if ("${MM_DDR_PERF_REQUIRED}" != "false") {
	            try {
	                prog_board("mm_ddr")
	        
	                node("${NODE_ADDRESS}") {
	                    echo "Running MM performance tests"
	                    dir("${SCRIPT_PATH}") {
							if ("$DEVICETYPE" == "VERSAL") {
								//run_as_sudo('./run_qdma_linux_perf_tests.sh ${PCI_BBDDF} ${DRIVER_PATH} dmaperf_versal_configs_mm ${NODE_ADDRESS}_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE}')
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_versal_configs_mm ${NODE_ADDRESS}_vm_mm_ddr ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_mm_ddr 4 \"1 0 0 0\" vfio-pci 0")
							} else {
								//run_as_sudo('./run_qdma_linux_perf_tests.sh ${PCI_BBDDF} ${DRIVER_PATH} dmaperf_configs_mm ${NODE_ADDRESS}_mm_bram ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE}')
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_configs_mm ${NODE_ADDRESS}_vm_mm_ddr ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_mm_ddr 4 \"1 0 0 0\" vfio-pci 0")
							}
	                    }
	                    ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.xlsx')})
						ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.log')})
	                    ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.xlsx", fingerprint: true})
						ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.log", fingerprint: true})
	                }
	            } catch (e) {
	                echo "Error during MM performance test"
	            }
            }
        }}}
    
        stage('Run ST Performance tests') { steps { script {
        if ("${ST_PERF_REQUIRED}" != "false") {
	            try {
	                prog_board("st")
	            
	                node("${NODE_ADDRESS}") {
	                    echo "Running ST performance tests"
	                    dir("${SCRIPT_PATH}") {
							if ("$DEVICETYPE" == "VERSAL") {
								
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_versal_pfetch_configs_st ${NODE_ADDRESS}_vm_st ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_st 4 \"1 0 0 0\" vfio-pci 0")
							} else if ("$DEVICETYPE" == "EQDMA") {
								
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_eqdma_pfetch_configs_st ${NODE_ADDRESS}_vm_st ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_st 4 \"1 0 0 0\" vfio-pci 0")
							} else {
								run_as_sudo("python vm_performance.py \"/home/dpdk/tests/linux/scripts/perf_test_scripts/\" \"./run_qdma_linux_perf_tests.sh 00040 ${DRIVER_PATH} dmaperf_pfetch_configs_st ${NODE_ADDRESS}_vm_st ${IO_RUNTIME} ${BIDI_ANALYSIS_EN} 1 ${BURST_SIZE} ${MARKER_EN} 1\" ../../../../drivers/linux/ linux ${PCI_BBDDF} ${VM_PATH} 1 ${VM_RAM} ${VM_CORES} ${NODE_ADDRESS}_vm_st 4 \"1 0 0 0\" vfio-pci 0")
							}
	                    }
	                    ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.xlsx')})
						ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/*.log')})
	                    ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.xlsx", fingerprint: true})
						ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/*.log", fingerprint: true})
	                }
	            } catch (e) {
	                echo "Error during ST performance test"
	            }
            }
        }}}

	stage('Kernel Logs') { steps { script {

	node("${NODE_ADDRESS}") {
		echo "---------------------Kernel crash logs--------------------"
		ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/dmesg_host.log')})
		ignore_error({run_as_sudo('cat ${SCRIPT_PATH}/dmesg_host.log | grep -E "segfault|warning|error|critical"')})
		ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/dmesg_host.log", fingerprint: true})
		ignore_error({run_as_sudo('rm -rf ${SCRIPT_PATH}/dmesg_host.log')})
		
		ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/dmesg_vm.log')})
		ignore_error({run_as_sudo('cat ${SCRIPT_PATH}/dmesg_vm.log | grep -E "segfault|warning|error|critical"')})
		ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/dmesg_vm.log", fingerprint: true})
		ignore_error({run_as_sudo('rm -rf ${SCRIPT_PATH}/dmesg_vm.log')})
	}

	}}}
            
    }
    post {
    
        always { script {
            // EMAIL_RECIPIENTS can be set via jenkins job parameter
            echo "Emailing build results to: ${EMAIL_RECIPIENTS}"
            send_build_result_email("${EMAIL_RECIPIENTS}")
        }}
    }
}
