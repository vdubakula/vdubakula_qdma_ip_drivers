#! /usr/bin/env groovy

def get_changes_string() {
    MAX_MSG_LEN = 100

    def change_sets = currentBuild.changeSets.unique()
    if (change_sets.size() == 0) {
        return " - No new changes"
    }

    def change_string = ""
    for (entry in change_sets[0].items) {
        change_string += "${entry.commitId} [${entry.author}]:<br/>- ${entry.msg}<br/>"
    }

    return change_string
}

def run_as_sudo(shell_command) {
    sh 'echo "#ces#2022#dsamd#" | sudo -S ' + shell_command
}

def reboot_target(target_hostname) {
    try {
        timeout(20) { //minutes
            // assume running on master node
            run_as_sudo("ssh -t -o StrictHostKeyChecking=no -l cadman ${target_hostname} /usr/bin/sudo -S /sbin/reboot") //schedule reboot in 1 min
        }
    } catch (e) {
        sleep 200 // seconds, give some time for reboot
        waitUntil { // wait until ssh port is open
            def ret = sh script: "nc -w 20 -z ${target_hostname} 22 > /dev/null", returnStatus: true
            return (ret == 0)
        }
    }

    node(target_hostname) { // confirm jenkins slave is up
        sh 'uptime; echo $(hostname) ONLINE'
    }
}

def ignore_error(func, err_msg = "ignored error") {
    try {
        func()
    } catch (err) {
        echo "$err_msg"
    }
}

def send_build_result_email(recipients) {
    mail(to: "${recipients}",
        mimeType: 'text/html',
        from: 'jenkinsrobot@xilinx.com',
        subject: "${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
        body: """<p>Project: ${currentBuild.fullDisplayName}<br/>
                Result: ${currentBuild.currentResult}<br/>
                Bitfile: ${BITFILE_LIST}<br/>
                Changes:<br/>
                ${get_changes_string()}<br/>
                <br/>
                For more details please go to <a href=${env.JOB_URL}>${env.JOB_NAME}</a></p>""");
}

// Jenkin's JTest processor requires that a skipped test contains the <skipped> element and not just setting status to "notrun":
def reformat_test_results(test_results_file) {
    sh """awk '{ if (\$1 == "<testcase" && match(\$0, "notrun")) print substr(\$0,0,length(\$0)-2) "><skipped/></testcase>"; else print \$0;}' ${test_results_file} > tmp.xml"""
    sh "rm -f ${test_results_file}"
    sh "mv tmp.xml ${test_results_file}"
}

pipeline {
    agent { node { label 'master' } }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }
    stages {

          stage('envsetup') { steps { script {//
            node("${NODE_ADDRESS}")  {
            echo "update the grub"
            if ("$BIND_DRV" == "vfio-pci") {
                run_as_sudo('cp /etc/default/grub-dpdk-vfio-pci /etc/default/grub')
            } else {
                run_as_sudo('cp /etc/default/grub-dpdk-igb-uio /etc/default/grub')
            }
                run_as_sudo('update-grub')
                run_as_sudo('update-grub2')
            }
        }}}

        stage('checkout') { steps { //
            node("${NODE_ADDRESS}")  {
                //deleteDir()
                checkout scm
            }
        }}

        stage('build') { steps {
            node("${NODE_ADDRESS}")  {script {
                echo "Preparing the dpdk build sources"
                sh "tar xzf ${DPDK_SRC}/dpdk-stable-${DPDK_VER}.tar.gz  -C ${DPDK_SRC}/../../../../"
                sh "tar xzf ${DPDK_SRC}/dpdk-kmods.tar.gz  -C ${DPDK_SRC}/../../../../dpdk-stable-${DPDK_VER}"
                dir("${DPDK_SRC}/../../../../") {
                    run_as_sudo('rm dpdk-stable-${DPDK_VER}/drivers/net/qdma -rf')
                    run_as_sudo('rm dpdk-stable-${DPDK_VER}/examples/qdma_testapp -rf')

                    sh 'cp HEAD/proj/sw_host/dpdk/examples/qdma_testapp dpdk-stable-${DPDK_VER}/examples/ -rf'
                    sh 'cp HEAD/proj/sw_host/dpdk/drivers/net/qdma dpdk-stable-${DPDK_VER}/drivers/net/ -rf'
                    sh 'cp HEAD/proj/sw_host/qdma_access/ dpdk-stable-${DPDK_VER}/drivers/net/qdma/. -rf'
                    sh 'cp HEAD/proj/sw_host/dpdk/build.sh dpdk-stable-${DPDK_VER}/ -rf'
                    echo "copy the tests cases to test directory"
                    run_as_sudo("cp ${TEST_CASES_PATH}/tests/* dpdk-stable-${DPDK_VER}/examples/qdma_testapp")
                    run_as_sudo("cp ${TEST_CASES_PATH}/dev_tests/* dpdk-stable-${DPDK_VER}/examples/qdma_testapp")
                }
                echo "building dpdk qdma pmd"
                dir("${DPDK_SRC}/../../../../dpdk-stable-${DPDK_VER}") { script {
                    sh 'patch -p1 < ../HEAD/proj/sw_host/dpdk/patches/dpdk/0001-net-qdma-Integrate-qdma-pmd-to-dpdk-${DPDK_VER}.patch'
                    run_as_sudo('rm build -rf')
                    run_as_sudo('rm examples/qdma_testapp/build -rf')
                    run_as_sudo('sh build.sh')
                }}
            }}
        }}

        stage('Static Analysis') { steps { script {
            if ("${STATIC_ANALYSIS}" == "1") {
                node("${NODE_ADDRESS}") {
                    dir("${SCRIPT_PATH}/../dpdk/") {
                        run_as_sudo('chmod +x ./run_static_analysis_dpdk.sh')
                        run_as_sudo("sh ./run_static_analysis_dpdk.sh ../../../../../dpdk-stable-${DPDK_VER} ./examples/qdma_testapp  ${COMPILE_FLAGS}")
                    }

                    dir("${DPDK_SRC}/../../../../dpdk-stable-${DPDK_VER}") { script {
                        ignore_error({run_as_sudo('chmod 0777  ./dpdk_checkpatch_log.txt')})
                        echo "Archiving dpdk_checkpatch_log "
                        archiveArtifacts artifacts: "dpdk_checkpatch_log.txt", fingerprint: true
                    }
                }
                }
            }
        }}}

        stage('deploy') { steps {
            node("${NODE_ADDRESS}")  {
                echo "uploading bitstream..."
                dir('.') { script {
                    bitfile_dir ="${env.WORKSPACE}/${TARGET_ID_LIST}"
                    echo "${bitfile_dir}" // BITFILE can be set via jenkins job parameter
                    if ("$DEVICETYPE" == "VERSAL") {
						run_as_sudo('sh util/common/scripts/program_versal_pdi.sh ${TARGET_ID_LIST} util/common/scripts/spi2vjtag.tcl ${TARGET_ID_LIST} util/common/scripts/qdma_versal_mm_st_4pf_252vf.tcl util/common/scripts/qdma_versal_msix.tcl')
                    }
                    else {
						run_as_sudo('sh util/common/scripts/program_multicard.sh "$TARGET_ID_LIST" "$BITFILE_LIST"')
                    }
                }}
            }

            script { // on master node
                echo "rebooting target machine..."
                reboot_target("${NODE_ADDRESS}")
            }

            node("${NODE_ADDRESS}")  { script {
                dir("${DPDK_SRC}/../../../../dpdk-stable-${DPDK_VER}/examples/qdma_testapp") {
                    run_as_sudo('chmod +x *.sh')
                }

                echo "Starting Test Execution"
                dir("${SCRIPT_PATH}/gtest_scripts") {
                    run_as_sudo('chmod +x ./*.sh')
                    run_as_sudo('chmod +x ./*.py')
                    def vm_cnt = "$VM_COUNT"
                    def int_vm_cnt = vm_cnt.isInteger() ?  (vm_cnt as int) : null
                    if(int_vm_cnt == 1)
                         vm_cfg = "\"${VM_1_CONFIG}\""
                    if(int_vm_cnt == 2)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\""
                    if(int_vm_cnt == 3)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\""
                    if(int_vm_cnt == 4)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\""
                    if(int_vm_cnt == 5)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\""  
                    if(int_vm_cnt == 6)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\""
                    if(int_vm_cnt == 7)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\""
                    if(int_vm_cnt == 8)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\""
                    if(int_vm_cnt == 9)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\" \"${VM_9_CONFIG}\""
                    if(int_vm_cnt == 10)
                         vm_cfg = "\"${VM_1_CONFIG}\" \"${VM_2_CONFIG}\" \"${VM_3_CONFIG}\" \"${VM_4_CONFIG}\" \"${VM_5_CONFIG}\" \"${VM_6_CONFIG}\" \"${VM_7_CONFIG}\" \"${VM_8_CONFIG}\" \"${VM_9_CONFIG}\" \"${VM_10_CONFIG}\""

                    echo "vm config ${vm_cfg}"
                    run_as_sudo("python vm_automation.py \"/home/dpdk/${SCRIPT_PATH}/gtest_scripts/\"  \"./gtest_top.sh 00040 ../../../../${GTEST_CONFIG_PATH} ../../../../${DRIVER_PATH} ../../../../${TEST_APP_PATH} vf dpdk ${CONFIG_BAR} ${BIND_DRV} ${COMPILE_FLAGS}\"  \"../../../../${DRIVER_PATH}/\" dpdk \"${PCI_BBDDF}\" ${VM_IMAGE_PATH} ${VM_COUNT} ${CONFIG_FILE_IN} ${CONFIG_FILE_OUT} ${VM_RAM} ${NUM_PF} ${VF_QUEUES} ${vm_cfg} ${BIND_DRV} ${CONFIG_BAR}")
                }
                ignore_error({run_as_sudo('chmod 0777 ${SCRIPT_PATH}/gtest_scripts/*.tar.gz')})
                ignore_error({archiveArtifacts artifacts: "${SCRIPT_PATH}/gtest_scripts/*.tar.gz", fingerprint: true})
            }}
        }}
    }
    post {

        always { script {
            // EMAIL_RECIPIENTS can be set via jenkins job parameter
            echo "Emailing build results to: ${EMAIL_RECIPIENTS}"
            send_build_result_email("${EMAIL_RECIPIENTS}")
        }}

        cleanup {
                node("${NODE_ADDRESS}") {script {
                echo "restore grub entry"

                dir("${DPDK_SRC}/../../../../dpdk-stable-${DPDK_VER}/examples/qdma_testapp") {
                    run_as_sudo('rmmod igb_uio.ko')
                    run_as_sudo('umount /mnt/huge')
                    run_as_sudo('rm /mnt/huge -rf')
                    run_as_sudo('cp /etc/default/grub-default /etc/default/grub')
                    run_as_sudo('update-grub')
                    run_as_sudo('update-grub2')
                }
                }
             }
        }
    }
}
